{"version":3,"sources":["scripts/main.js"],"names":["dataSalary","list","document","querySelector","sortList","ul","children","sort","child1","child2","s1","convertSalaryToInt","getAttribute","s2","forEach","child","append","text","normalizedText","replaceAll","salary","parseInt","isNaN","getEmployees","parseResult","map","name","textContent","position","dataset","age"],"mappings":";AAAA,aAyCC,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAvCD,IAAMA,EAAa,cAEbC,EAAOC,SAASC,cAAc,MAMpC,SAASC,EAASC,GACZA,EAAAA,EAAGC,UAAUC,KAAK,SAACC,EAAQC,GACvBC,IAAAA,EAAKC,EAAmBH,EAAOI,aAAaZ,IAG3Ca,OAFIF,EAAmBF,EAAOG,aAAaZ,IAEtCU,IACXI,QAAQ,SAAAC,GAASd,OAAAA,EAAKe,OAAOD,KAGlC,SAASJ,IAAmBM,IACpBC,GAD2B,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,IACLC,WAAW,IAAK,IAAIA,WAAW,IAAK,IAC1DC,EAASC,SAASH,GAEpBI,OAAAA,MAAMF,GACD,EAGFA,EAGT,SAASG,EAAalB,GAUbmB,OATa,EAAInB,EAAGC,UAAUmB,IAAI,SAAAV,GAChC,MAAA,CACLW,KAAMX,EAAMY,YACZC,SAAUb,EAAMc,QAAQD,SACxBR,OAAQL,EAAMc,QAAQT,OACtBU,IAAKf,EAAMc,QAAQC,OA9BzB1B,EAASH,GAETsB,EAAatB","file":"main.9ff8913a.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst dataSalary = 'data-salary';\n\nconst list = document.querySelector('ul');\n\nsortList(list);\n\ngetEmployees(list);\n\nfunction sortList(ul) {\n  [...ul.children].sort((child1, child2) => {\n    const s1 = convertSalaryToInt(child1.getAttribute(dataSalary));\n    const s2 = convertSalaryToInt(child2.getAttribute(dataSalary));\n\n    return s2 - s1;\n  }).forEach(child => list.append(child));\n}\n\nfunction convertSalaryToInt(text = '') {\n  const normalizedText = text.replaceAll('$', '').replaceAll(',', '');\n  const salary = parseInt(normalizedText);\n\n  if (isNaN(salary)) {\n    return 0;\n  }\n\n  return salary;\n}\n\nfunction getEmployees(ul) {\n  const parseResult = [...ul.children].map(child => {\n    return {\n      name: child.textContent,\n      position: child.dataset.position,\n      salary: child.dataset.salary,\n      age: child.dataset.age,\n    };\n  });\n\n  return parseResult;\n}\n"]}